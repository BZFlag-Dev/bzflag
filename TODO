to do list for bzflag
---------------------

THESE SHOULD HAPPEN BEFORE THE NEXT RELEASE:

	* none

THESE SHOULD HAPPEN BEFORE THE NEXT RELEASE BUT NOONE WILL STEP UP FOR THEM

	* none

THESE ARE LOWER PRIORITY

* support gameinfo requests as one time udp packets and include all the
  same information that bzfls tracks.
  We should allow server info, player and score lists over udp
  from any udp address, not just a "connected" player.
  bzfls should use this udp to confirm server availability
  before falling back to tcp pipe for the same msgs.
  Posibly make the server list have 2 modes, Internet and LAN
  using the left and right arrow keys to change between them.
  boroadcast for LAN servers only happens when on the LAN seting
  to minimise trafic, and difirentiate the servers.

* shorten laser to like 1.25 normal shot
    ( this is not a simple change, and it should be evaluated for play
      balance issues )

* server should send less frequent updates for "distant" players

* server should pick client enter position
  ## Server has no idea about players shots, this is a
     key to picking a safe entry location. This isn't
     a simple change. ##

* would be nice if LocalPlayer<->Robots wouldn't relayPackets
  (MsgPlayerUpdate) thru server. bzflag should be able to act
  as a relay for a local player and the server should know to
  only send one MsgUpdate to the master, who will relay to the
  connected players/bots. This will allow multiple players
  behind one slow net connection to play multiple players
  behind another sloow connection. (for example)

* rework the BZDB->eval() cacheing to support expression
  dependencies - if a variable changes, all the expressions
  that use that variable should be updated as well, or at
  the least, flush the entire cache when a callback happens

* make the vertical rico solution more elegant - get rid of
  BoxBuilding::getNormal and fix existing code to do z -
  getNormalRect & the like.

* require an email contact name for public servers. Perhaps
  unpublished by default

* Create a new MsgThrottle message sent from client to server
  to inform server to throttle MsgPlayerUpdates from other clients
  to X. X is set in bzflag.bzc. Server uses PlayerInfo.lastState to
  batch send PlayerUpdates after throttle time has passed.
  Clients timestamp updates themselves, to catch out of order
  packets, but server restamps timestamps to get consistent
  times for all messages.

* Lag information should be appended to MsgPlayerUpdate packet
  by server, and use half in dead reckoning calculations

* create new 64x64, 48x48, 32x32, 16x16 official bzflag icons.
  Should feature the BZFlag tank. The large ones should include
  the BZFlag logo. All should feature transparency.

* move -synctime data to different Msg packet, or create new one.
  MsgSetVar (ala 1.8) would be a good one

* flags should all be nullflags from client view until
  a) you pick one up
  b) you get the identify flag (send updates for all flags?)
  If player drops a flag and it stays, players have it's real ID.

* remove all DNS lookups from client when contacting a server IP
  supplied from the list server

* add http connect proxy support for list server and gaming

* allow /dev/dsp* on Linux to be selected someplace. command line,
  environment var, config file, who knows. ;-)

* some bzdb values are stored elsewhere and written to bzdb
  only on exit. these should be stored in bzdb for the entire
  time

* add caching to bzdb for integer/float values, so they don't
  have to be atoi()'ed or eval()'ed all the time. isTrue would
  also be a good one to cache

* document headers with JavaDoc-style comments (for doxygen)

* update doc/protocol.txt all descriptors to new format

* move team base packing into WorldInfo (bzfs)
  and add height (z)

* support gameinfo requests as one time udp packets (if udp)

* remove flipz from pyr net code and replace with neg height.

* remove shoothrough/drivethrough and replace with one flag
  meaning passable

* bzadmin should build without GL headers installed

* configure should detect missing GL/GLU headers then
  warn and disable the client compile

* build a prototype(4) for bsd, solaris

* fix up irix idb

* break the net compatibility to allow some fixes
   including:

* ipv6 support

* if we stay with tcp/udp then use the same ports for the
   udp pipe as for the tcp pipe on both client and server

* consider using ENet http://enet.cubik.org/ for
   the network protocol

* encapsulate stuff requiring platform #ifdef's:
   networking API into libNet.a.
   fork/exec (used in menus.cxx) into libPlatform.a
   file system stuff (dir delimiter, etc.)
   user name stuff

* clean up libraries that could be reused by other games

* implement texture cache on client and have server offer
   new textures as part of the world.

* allow loadable meshes as "tanks"

* supply tank "meshes" from the server

* allow client to choose a mesh from the server list

* implement one way cross server teleporters

* move robots to separate binaries and allow either the
   client or server to exec them. Have a server option
   to keep n players in the game which auto spawns/kills
   enough bots to do it. Get rid of bot player type
   completely. bots should get all message types.

* smarter robots

* add type of shot (normal, gm, sw, etc) to killed message

* more flag types

* mines:
   not necessarily a good idea.  if mines are visible
   then they're fairly useless.  if invisible then they're
   not fun because you're destroyed without warning and
   no amount of skill will help you.  someone suggested
   making them visible within a certain range.  another
   possibility is damage before destruction.

* radio chat:
   allow players to communicate via low-quality audio.
   already some support built into the server for this.

* implement a visual "server list" game server

* pre-game waiting room:
   provide a means for players to gather before and after
   a game.  basic text chat facilities.  allows players
   to wait for enough players for a game and to discuss
   strategy, etc.  could build this into bzfs easily.
