to do list for bzflag
---------------------

* create new 64x64, 48x48, 32x32, 16x16 official bzflag icons.
  Should feature the BZFlag tank. The large ones should include
  the BZFlag logo. All should feature transparency.

* convert server to use 5154 as the default port, because IANA rocks!

* remove -noudp option

* move -synctime data to different Msg packet, or create new one.
  MsgSetVar (ala 1.8) would be a good one

* server should pick client enter position

* flags should all be nullflags from client view until
  a) you pick one up
  b) you get the identify flag (send updates for all flags?)
  If player drops a flag and it stays, it can have it's real ID.

* remove all DNS lookups from client when contacting a server IP
  supplied from the list server

* add http connect proxy support for list server and gaming

* allow /dev/dsp* on Linux to be selected someplace. command line,
  environment var, config file, who knows. ;-)

* some bzdb values are stored elsewhere and written to bzdb
  only on exit. these should be stored in bzdb for the entire
  time

* add caching to bzdb for integer/float values, so they don't
  have to be atoi()'ed or eval()'ed all the time. isTrue would
  also be a good one to cache

* describe rabbit hunt in man page (and in-game help?)

* document headers with JavaDoc-style comments (for doxygen)

* update doc/protocol.txt all descriptors to new format

* add byte lengths to each world component

* move team base packing into WorldInfo (bzfs)
  and add height (z)

* support gameinfo requests as one time udp packets (if udp)

* remove flipz from pyr net code and replace with neg height.

* remove shoothrough/drivethrough and replace with one flag
  meaning passable

* configure should detect missing GL/GLU headers then
  warn and disable the client compile

* build a prototype(4) for bsd, solaris

* fix up irix idb

* build a tar as output that supports "rpm -tb <tar>"

* break the net compatibility to allow some fixes
   including:

* ipv6 support

* version as strings as in 1.9.0-cvs20030604

* if we stay with tcp/udp then use the same ports for the
   udp pipe as for the tcp pipe on both client and server

* consider using ENet http://enet.cubik.org/ for
   the network protocol

* encapsulate stuff requiring platform #ifdef's:
   networking API into libNet.a.
   fork/exec (used in menus.cxx) into libPlatform.a
   file system stuff (dir delimiter, etc.)
   user name stuff

* clean up libraries that could be reused by other games

* implement texture cache on client and have server offer
   new textures as part of the world.

* allow loadable meshes as "tanks"

* supply tank "meshes" from the server

* allow client to choose a mesh from the server list

* implement one way cross server teleporters

* implement a visual "server list" game server

* move robots to separate binaries and allow either the
   client or server to exec them. Have a server option
   to keep n players in the game which auto spawns/kills
   enough bots to do it. Get rid of bot player type
   completely. bots should get all message types.

* smarter robots

* add type of shot (normal, gm, sw, etc) to killed message

* more flag types

* mines:
   not necessarily a good idea.  if mines are visible
   then they're fairly useless.  if invisible then they're
   not fun because you're destroyed without warning and
   no amount of skill will help you.  someone suggested
   making them visible within a certain range.  another
   possibility is damage before destruction.

* radio chat:
   allow players to communicate via low-quality audio.
   already some support built into the server for this.

* pre-game waiting room:
   provide a means for players to gather before and after
   a game.  basic text chat facilities.  allows players
   to wait for enough players for a game and to discuss
   strategy, etc.  could build this into bzfs easily.
