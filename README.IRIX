README for Unix platforms
-------------------------

Building on IRIX will work with either the SGI MIPS compiler or the
GNU gcc3 compiler.  The GNU compiler is available for download from
SGI freeware.  BZFlag is not presently tested in 64bit-compilation
mode, and -o32 mode is no longer supported; the default -n32 is
supported and functional.  The -o32 mode "should" work by simply
changing the -DEFAULT option to be abi=o32 instead of abi=n32; best
of luck regardless.

Note that the gcc-3.2.2 version picked up some 6.5.18-isms, so you may
need to track down the older 3.1 release (or compile 3.2 yourself) if
you are using gcc to compile.

If both the GNU compiler and the SGI MIPS compiler are installed on
the same system, the GNU compiler will be used by default.  To use the
SGI MIPS compiler, you will need to inform the configuration script of
your preference.  You will need to set and export two environment
variables.  For simplicity, the example below also smashes in the
CFLAGS and CXXFLAGS as the compiler "name"..

# to use the MIPSPro compiler
./configure  CC="cc" CXX="CC" CXXFLAGS="-O2 -OPT:Olimit=32768 -DEFAULT:abi=o32:isa=mips3:proc=r5k -LANG:std -F:template_in_elf_section -no_auto_include -ptused -prelink" CFLAGS="-O2 -OPT:Olimit=32768 -DEFAULT:abi=o32:isa=mips3:proc=r5k -LANG:std -no_autoinclude -ptused -prelink"
make

If you try to boost the optimization to -O3, it is likely that the
compiler will crash.  Some files will simply take a very long time to
compile no matter what optimization level, so be patient. ;)

The next hurdle to overcome will be a link error for 2 of then
executables (bzfs & bzflag) that link against libraries that contain
instantiated templates.  That is to say that the compile will fail
with "Unresolved text symbol" errors when it tries to link the
binaries.

This issue is merely a problem of figuring out the proper compiler
options, so if you know what is missing, please let one of the devs
who deals with the IRIX build know.  The work-around is very easy.
Replace the name of the libraries with the missing symbols
(libCommon.a, libPlatform.a, and libGLKit.a for example) with all of
the object files that comprised it.  When the build fails for linking
bzfs, for example, do this:

cd src/bzfs
CC -O2 -OPT:Olimit=32768 -DEFAULT:abi=o32:isa=mips3:proc=r5k -LANG:std -FE:template_in_elf_section -no_auto_include      -o bzfs ../date/buildDate.o AccessControlList.o CmdLineOptions.o  CustomBase.o CustomBox.o CustomGate.o  CustomLink.o CustomPyramid.o  CustomWeapon.o CustomWorld.o FlagInfo.o  Permissions.o TeamBases.o  TextChunkManager.o VotingArbiter.o  WorldFileObject.o WorldFileObstacle.o  WorldInfo.o WorldWeapons.o commands.o  bzfs.o ../net/*.o             ../common/*.o   ../regex/libregex.a -lm -lsocket 
cd ../..
make

Basically copy-paste the link line that fails, and replace the
libSomething.a names with *.o.  The pre-linker will kick in again and
build some more, and the link should complete.  You should then be
able to return to the top-level of the source tree and continue
compiling.  You'll need to do this for both bzflag and bzfs.

The last problem that you may encounter on older IRIX systems is a
problem in the curses.h header.  The header uses a symbol name that is
not valid with the CC C++ compiler:

cc-1084 CC: ERROR File = /usr/include/curses.h, Line = 611
  The indicated declaration has an invalid combination of type specifiers.

                syncok(WINDOW *, int bool),

Again there is a relatively simple work around, though this one
involves actually editing a file.  Copy the /usr/include/curses.h file
to the bzflag include/ directory.  Edit the file and replace "int
bool" with "int b".  Save the file, and restart make and the build
should succeed.  Best of luck.

See the generic install instructions in README for more details.

