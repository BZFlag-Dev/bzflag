README for Unix platforms
-------------------------

Building on IRIX will work with either the SGI MIPS compiler or the
GNU gcc3 compiler.  The GNU compiler is available for download from
SGI freeware.  BZFlag is not presently tested in 64bit-compilation
mode, and -o32 mode is no longer supported; the default -n32 is
supported and functional.  The -o32 mode "should" work by simply
changing the -DEFAULT option to be abi=o32 instead of abi=n32; best
of luck regardless.

Note that the gcc-3.2.2 version picked up some 6.5.18-isms, so you may
need to track down the older 3.1 release (or compile 3.2 yourself) if
you are using gcc to compile.

If both the GNU compiler and the SGI MIPS compiler are installed on
the same system, the GNU compiler will be used by default.  To use the
SGI MIPS compiler, you will need to inform the configuration script of
your preference.  You will need to set and export two environment
variables.  For simplicity, the example below also smashes in the
CFLAGS and CXXFLAGS as the compiler "name"..

# for a bourne-shell environment:
./configure CC="cc -OPT:Olimit=65536 -DEFAULT:abi=n32:isa=mips4:proc=r10k -LANG:std -FE:template_in_elf_section -no_auto_include" CXX="CC -OPT:Olimit=65536 -DEFAULT:abi=n32:isa=mips4:proc=r10k -LANG:std -FE:template_in_elf_section -no_auto_include"
make

# for a c-shell environment
./configure CC="cc -OPT:Olimit=65536 -DEFAULT:abi=n32:isa=mips4:proc=r10k -LANG:std -FE:template_in_elf_section -no_auto_include" CXX="CC -OPT:Olimit=65536 -DEFAULT:abi=n32:isa=mips4:proc=r10k -LANG:std -FE:template_in_elf_section -no_auto_include"
make

If you try to boost the optimization to -O3, it is likely that the
compiler will crash.

During the build, it is also very likely that the build will hang.
Perhaps when it gets to src/net/multicast.cxx, for example.  This
appears to be related to C++ optimization bugs in the MIPSPro 7.3
compiler.  To get around this problem, abort the hung compilation and:

cd src/net/
CC -OPT:Olimit=32768 -DEFAULT:abi=o32:isa=mips3:proc=r5k -LANG:std -FE:template_in_elf_section -no_auto_include -DHAVE_CONFIG_H -I. -I../../include -c -o multicast.o `test -f 'multicast.cxx' || echo './'`multicast.cxx
cd ../..
make

You should then be compiling again.  You may have similar issues with
other files..  Repeat the above example compile line for those files
by replacing multicast with the corresponding file name.  Some files
will simply take a very long time to compile, so be patient. ;)

The next hurdle to overcome will be a link error for 3 of then
executables (bzfs, bzflag, bzadmin) that link against libraries that
contain instantiated templates.  That is to say that the compile will
fail with "Unresolved text symbol" errors when it tries to link the
binaries.

This issue is merely a problem of figuring out the proper compiler
options, so if you know what is missing, please let one of the devs
who deals with the IRIX build know.  The work-around is very easy.
Replace the name of the library with the missing symbols (libCommon.a
or libGLKit.a for example) with all of the object files that comprised
it.  When the build fails for linking bzfs, for example, do this:

cd src/bzfs
CC -O2 -OPT:Olimit=32768 -DEFAULT:abi=o32:isa=mips3:proc=r5k -LANG:std -FE:template_in_elf_section -no_auto_include      -o bzfs ../date/buildDate.o AccessControlList.o CmdLineOptions.o  CustomBase.o CustomBox.o CustomGate.o  CustomLink.o CustomPyramid.o  CustomWeapon.o CustomWorld.o FlagInfo.o  Permissions.o TeamBases.o  TextChunkManager.o VotingArbiter.o  WorldFileObject.o WorldFileObstacle.o  WorldInfo.o WorldWeapons.o commands.o  bzfs.o ../net/libNet.a             ../common/*.o   ../regex/libregex.a -lm -lsocket 
cd ../..
make

Basically copy-paste the link line that fails, and replace libCommon.a
(and libGLKit if you see it) with *.o.  The pre-linker will kick in
again and build some more, and the link should complete.  You should
then be able to return to the top-level of the source tree and
continue compiling.  You'll need to do this for bzflag, bzfs, and
bzadmin.

See the generic install instructions in README for more details.

