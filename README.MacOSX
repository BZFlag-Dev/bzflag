BZFlag README for Mac OS X
==========================

BZFlag generally runs rather nicely on Mac OS X.  As of BZFlag 2.0,
the Mac OS X port of BZFlag is feature-wise complete and equivalent to
the other fully-supported platforms.

Included below are instructions on installing BZFlag both from a
binary and from a source distribution.  See the project site downloads
http://sourceforge.net/project/showfiles.php?group_id=3248&package_id=53923
to obtain the latest binary distribution of BZFlag for Mac OS X.

Binary Distribution
-------------------

If you've obtained a binary distribution of BZFlag, installation
should be a simple matter of copying the icon provided in the disk
mounting image (the .dmg) to your Applications folder.  If you cannot
run the client at all (e.g. it starts to a black screen), you can try
several things:

  1) Remove any existing BZFlag directory in your personal application
     support folder:  rm -rf "~/Library/Application Support/BZFlag"

  2) Switch to a lower resolution before running the game.  Some older
     cards don't have enough memory to run BZFlag (8+ is preferred) at
     higher resolutions.

  3) Run the binary directly by using Terminal:
     /Applications/BZFlag-2.0.4.app/Contents/MacOS/BZFlag

If you still have issues running the game, please submit a bug report
to the project site bug tracker:

  http://sourceforge.net/tracker/?group_id=3248&atid=103248

If the game starts but unexpectedly crashes or locks up your system,
please file a bug report with the details of what is occuring.  You
can try turning off the Lighting option in the game to see if that
helps with the crashes.

Source Distribution
-------------------

BZFlag may be built either using the same instructions as those for
Unix following ./autogen.sh && ./configure && make, or using the XCode
project in the top-level directory to end up with a double-clickable
BZFlag.app build.

If you're compiling from source, it's expected that you have some
understanding of how to compile applications on the command line.  In
general, source distributions are not supported for SVN checkouts.
They are only supported for regular source release distributions.

See the instructions in README and INSTALL for more details.

Building Release Binaries
-------------------------

BZFlag binaries for Mac OS X are presently built as universal binaries
targetting Tiger (10.4) on Intel machines and Panther (10.3) on PPC machines,
respectively. It is expected that Panther support will be dropped by the
project in the near future. The BZFlag build system presently does not support
building against any SDK other than the native machine version. Therefore,
BZFlag binaries must be built on the physical target platform. Additionally,
due to possible endian-ness issues, building both the Intel and PPC components
of a universal binary on an Intel machine results in MD5 errors, so PPC
binaries must be built on actual PPC hardware. This is an issue with the code
that is being looked into.

The .app package for BZFlag binaries must be assembled by hand after building
Intel and PPC binaries separately on the appropriate hardware and using the
"lipo" command-line tool to assemble them. This includes executables for
bzflag, bzfs, bzadmin, and each plug-in. The .app package can be obtained from
previous releases, assembled by hand using command-line tools, or the Xcode
project can be used to create a preliminary .app package (although the
contents of the Resources/ and MacOSX/ subdirectories must be replaced with
the updated files). When building binaries using the command line, plug-in
support should be enabled by passing the "--enable-shared" option to configure.
Application packages for Mac OS X should be named using the
"BZFlag-<version>.app" convention. Debugging symbols should be left intact in
the binaries, as stripping them creates linking errors at runtime in some
cases.

The final step in preparing a release binary is to create a disk image.
It should be noted that older versions of Mac OS X have compatibility issues
when reading disk images created on certain later versions. A disk image should
be created large enough to accomodate the BZFlag application package (~200MB).
After the BZFlag binary is copied in, the disk image background picture should
be copied to the disk image and then set hidden. View preferences would then be
modified to set the image file as the background picture of the disk image
root folder. The root folder of the disk image should be made to auto-open
using appropriate command-line tools, or a GUI utility such as AutoOpen
(available freely online). When the disk image is configured as desired, the
disk image can then be compressed by using the convert disk image function of
Apple's disk utility. The resulting disk image should be thoroughly tested
on multiple versions of Mac OS X and on both architectures to ensure proper
functionality.
