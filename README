
				    BZFlag 2.0.5
				 http://BZFlag.org/
			Copyright (c) 1993 - 2005 Tim Riker

Maintainer
==========

Tim Riker <Tim@Rikers.org>
http://rikers.org/

Original Author
===============

Chris Schoeneman
475 Hawthorne Av
Palo Alto, CA 94301
crs23@bigfoot.com

See the AUTHORS file for more authorship details.


Introduction
============

This is the readme file for the BZFlag source tree.  It includes a
manifest, simple build instructions, and other information for BZFlag
development.  See the "Compiling and Installation" steps below to get
started.


Getting BZFlag
==============

The home page provides access to the primary BZFlag download site.
This web site includes pages for downloading the compiled and source
code versions.  Compiled versions are distributed as installable
packages.  Source code is archived in various formats.  After
unpacking a source distribution, you should have the following files
in the new 'bzflag' directory:

  README	- this file
  README.*	- platform specific details
  BUGS		- a list of known bugs
  BZFlag.xcode  - Mac OS X XCode project
  ChangeLog	- source code changes since previous release
  COPYING	- the license for BZFlag
  NEWS		- history of visible changes for each release
  DEVINFO       - information for developers
  PORTING	- a guide for porting BZFlag
  RELNOTES	- placeholder - see NEWS
  TODO		- incomplete list of things to do
  data/		- data files (sounds, images, etc.)
  debian/	- debian apt files
  Dev-C++/	- Dev-C++ project files
  doc/		- partial documentation in doxygen format
  include/	- include headers for libraries
  man/		- man pages
  misc/		- miscellaneous goo
  package/	- stuff to build installable packages
  src/		- bzflag, bzfs, etc. source code
    3D/		  - 3D code including texture manager
    bzadmin/      - bzadmin app source code (text admin/chat client)
    bzflag/	  - bzflag app source code (game client)
    bzfs/	  - bzfs app source code (game server)
    common/	  - general purpose classes
    geometry/	  - geometry rendering classes
    mediafile/	  - classes for reading resources
    net/	  - networking classes and functions
    obstacle/	  - collision detection stuff
    ogl/	  - OpenGL utility classes
    platform/	  - platform dependent code
      MacOSX/       - Mac OS X specific files
    scene/	  - high level rendering algorithms
    zlib/	  - compression library
  tools/	- various helper utilities
  win32/	- extra stuff for building on the Windows platform


Compiling and Installation
==========================

To compile a playable BZFlag, the following steps should get you up
and running quickly:

./autogen.sh
./configure --enable-optimized
make
src/bzflag/bzflag

If configure detected everything it needed to build the BZFlag client,
after make the client will be sitting in src/bzflag as 'bzflag'.  The
game can be run from there, though you will probably want to "sudo
make install" or otherwise become a privileged user and install the
game properly for your system.

If you're building on a platform that has a README.* file, you should
consult that file as they usually contain addition compilation
instructions for building on that platform.  There are often
additional hints for common problems specific to those platforms as
well.

The Longer Version:

To build sources checked out directly from CVS you need to create a
configure script. You can skip this step if you grab an distribution
of BZFlag that already has a ./configure script in it, such as from a
source distribution tarball.  To generate the configure script, you
run the provided autogen.sh script:

  % sh autogen.sh

The script will report whether sufficient versions of the GNU Build
System tools (i.e. autoconf, automake, and libtool) that were detected
and if successful, a configure script will be generated.  If the
script fails, submit a report to the developers containing the output
of "sh autogen.sh -v" to rerun autogen.sh run in verbose mode.  One of
the most common failures is having insufficient versions or mismatched
combinations of the GNU Build System tools, make sure your tools are
recent.

Now that you have a configure script and presuming the previous step
was successful, you can configure BZFlag:

  % ./configure --help

There are a variety of options possible when configuring BZFlag.  Most
notably, you'll probably want to use the --enable-optimized option for
performance and the --enable-shared option if you are building server
plugins.

  % ./configure --enable-optimized --enable-shared

You may want to create a 'work' directory and configure from there to
have all the build products and binary executables get placed in a
directory separate from the sources.  To do this, simply create a
directory then run configure and make from there instead.

After configure completes, it will report whether all the requisite
packages were found that it needs in order to build the client and the
server.  The client is reliant upon the following external
dependencies that should be installed before running configure:

  OpenGL 1.0+
  libSDL 1.2+
  libCURL 7+

If you're on an operating sytem that uses a packaging system
(e.g. apt, portage, ports, etc), be sure to install the development
kit versions of each of those (e.g. xlibmesa-gl-dev package) so that
headers are made available.

The final summary at the end of running configure will report whether
the client will be built or not.  Once configure has been run, you may
compile by simply running 'make'.  If you have GNU Make and are on a
multiprocessor system, you can build in parallel with the -j option:

  % make -j4

If compilation was successful, the client will be in src/bzflag and
the server will be in src/bzfs as 'bzflag' and 'bzfs' respectively.
You can run the client or the server directly from those locations
with or without installing:

  % src/bzflag/bzflag

BZFlag looks for data files in a compiled in path or in ./data/
 or in the previously specified data path only.  This means that to
test in a working directory you need to tell bzflag where to find
these files if there is not a 'data' directory in your current
directory.  This can be done with a symlink:

  % ln -s ./path/to/bzflag/data

After testing you can install BZFlag by running 'make install' with
sufficient system installation privileges.  Use 'sudo', 'su', or
similar methods to elevate your privileges when installing BZFlag
system-wide:

  % sudo make install

You should now have BZFlag in the system directory ready to run.

If you have not admin privileges on your platform, you can install
files in a directory that you own; for this to work, you have to
append to the configure command the prefix option.

  % ./configure --prefix=YourHomeDirectoryHere

You will then be able to perform a "make install" without needing to
elevate your privileges, and all bzflag executable files will be
installed in the subdir bin of the specified path.

For additional information on installing, see INSTALL file.

Again, some platforms may be different.  See the README file
appropriate to your system for more information:

  Platform			README file
  --------			-----------
  UNIX, Linux			README.UNIX
  IRIX				README.IRIX
  Solaris			README.SOLARIS
  Mac OS X			README.MacOSX
  Windows 95/98/NT		README.WIN32, README.MINGW32, README.DEVC++


You can also build an installable package using:

  % make package

The package will be placed in ./dist; the exact form of the package
depends on the platform.

There are three cleanup targets: clean, distclean, and
maintainer-clean.

`make clean' removes intermediate files but leaves bzflag and other
programs and any man pages.

`make distclean' removes everything clean does and also programs and
man pages. This should get things back to a tarball state.

`make maintainer-clean' removes everything distclean does and also
packages, directories created during the build, and the platform
configuration; this should get the source tree back to its state in
CVS.

To build BZFlag for an unsupported platform, see PORTING.

The ./configure script has a number of build options that you may find
interesting.


Mailing Lists
=============

There are two BZFlag mailing lists, a user list and a developer's
list.  The former is for general BZFlag discussion and announcements.
The latter is for coding and development discussion only.

To join a mailing list, go to http://BZFlag.org/email-list.html/ and
follow the info there.

Contributions
=============

Patches should be entered into the patch tracking system on
http://sourceforge.net/projects/bzflag/ If you like you may also send
mail to either the BZFlag development mailing list, or Tim@Rikers.org
(the development mailing list is preferred) to discuss contributions to
the official BZFlag source code.  Small changes can be attached to the
mail in 'cvs diff -u' unified diff format.


Bug Reports
===========

For bug reports please go to bug tracking system on
http://sourceforge.net/projects/bzflag/ Alternatively, you can email
bug reports to Tim@Rikers.org but the web based method is preferred.


Known Bugs
==========

See BUGS.


Contributors
============

see AUTHORS


Source Tree Organization
========================

Note that include/ does not have all the include files.  If a header
is used entirely within a library (i.e. it doesn't directly provide
functionality outside the library) then the header is found in the
library's directory under src/.  An include file goes in include/ only
if it's required by another library or libraries or executables.
While this complicates locating a header file (it can be in one of two
places instead of just one place), you can instantly tell if a header
file is (can be) used by clients of the library.


UDP added by Frank Siegert, frank@this.net, frank@bzflag.de

BZFlag implements UDP unicast relay networking. This provides much
better timing and stability compared to just TCP.

UDP does not work, why?

- When I connect to a newer server with this client others report they
  can see me but I get 'black caps' after a few seconds for all other
  players?

Two possibilities:

a) you are behind a NAT router that is not forwarding UDP traffic to
   your system. Try reconfiguring the router to do NAT on UDP packets.

b) you are behind a firewall or a desktop firewall (e.g. ZoneAlarm)
   that is blocking incoming UDP traffic. Please reconfigure the
   firewall or disable ZoneAlert for the game, for more intelligent
   desktop firewalls set them up to let UDP port 17200 to 17220
   through.

