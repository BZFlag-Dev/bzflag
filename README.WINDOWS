README for Windows (32- and 64-bit) platforms
---------------------------------------------

**Compilers**
BZFlag uses Microsoft Visual C++ for its pre-built binary
releases and project files are provided for anyone to use.
The current compiler used is Visual C++ 2013. Both the full
and express versions are supported. Support for versions of 
Visual Studio prior to 2013 has been discontinued, and no 
projects are provided for these versions.

Users that do not have the full commercial version of Visual Studio
may use the freely available VC2013 EE edition for personal use.
It can be found at http://www.microsoft.com/express/download/. 

It is also possible to build on Windows using MinGW/MSYS or
Cygwin, both of which use a unix-style autotools build system;
for details, see README.MINGW32 (for MinGW) or the main
README (for Cygwin). These build method are not maintained as
well as the systems used for our official builds, so results
may vary.

This document focuses on the build process using Visual C++ 2013.

**Targets**
There are a total of 4 build targets in the VC projects.
Release and Debug targets are configured so that they will
"build out of the box" for the majority of users. Both targets
are provided for both 32 and 64 bit binaries.

Please note that there is no real performance advantage in having
a 64 bit BZFlag client, the game does not use that much ram.

**Required Libraries**

You will need the windows DirectX SDK
  (download at http://www.microsoft.com/download/en/details.aspx?displaylang=en&id=6812)

You may also need to install curses and NSIS to do a full
distribution build.  Public Domain Curses is at
http://sourceforge.net/projects/pdcurses/files/ .  The release notes
file there explains which .zip file to use.

**Running and Debugging**
By default the compiler will copy the compiled executables to the root level
of the source drive ( the same place that the data dir is at). From there
you can simply double click the application to run it. If you wish to debug
the program, you must set the debug executable path and working directory
inside VC to use this executable and path.

**Installer**
If you wish to build the full release package using the fullbuild solution,
you will need to have NSIS installed. The built installer will be placed in 
the _bin folder for the target in the root of the source tree.
