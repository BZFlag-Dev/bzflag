README for Windows (32- and 64-bit) platforms
---------------------------------------------

BZFlag uses Microsoft Visual C++ for its prebuilt binary
releases (version 7.1 aka ".NET 2003"). Project files
are also provided for Visual C++ 8.0 which are also
useable by the free "visual C++ .net 2005 express edition".
Visual Studio 6.0 support has been discontinued.

It is also possible to build on Windows using MinGW/MSYS or
Cygwin, both of which use a unix-style autotools build system;
for details, see README.MINGW32 (for MinGW) or the main
README (for Cygwin).

To build bzflag on Windows without using Cygwin or MingW32, get 
Visual C++ or something that can read Visual C++ projects and 
solutions.

There are Release and Debug targets that will build out of the box.
There are also Release_Distribution and Debug_Distribution targets
which require GLEW and PDCurses.
If you wish to build _Distribution configurations, you will need to 
add the include directories and libraries to your visual c++
configuration in the Tools/Options/Projects/VC++ Directories dialog.

If you wish to build the installer, configure your executables in the
Tools/Options/Projects/VC++ Directories dialog.
Click the Executables tab, and add the directory where the NSIS
installer builder is found.

The built installer will be placed in the dist folder.

If you are using Visual C++ 2005 EXPRESS edition, you will need to install
a number of extra things before you can build. BZFlag will not build with
VC express editions "out of the box".
Also note that the VC8 project does not have the same setup as the VC7.1 does
since it is not used for binaries. It will not convert the man pages
into HTML automatically, nor does it build a binary with the GLEW library.

You will need the windows platform SDK
  (instructions http://msdn.microsoft.com/vstudio/express/visualc/usingpsdk/default.aspx)
You will need the windows DirectX SDK
  (instructions at http://msdn.microsoft.com/directx/sdk/readmepage/default.aspx)
You may wish to also install curses and glew (see above).
Use the VC8 projects in the MSVC directory.

If you wish to build for 64 bit Windows, you must use MSVC 8.0 (visual c++ .net 2005),
and use the 64 bit targets.
